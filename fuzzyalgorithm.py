# -*- coding: utf-8 -*-
"""fuzzyalgorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1De_Qwt1MD0ri4RiBFbdVYhOXAe3Al4_i

Anggota Kelompok : 
- Muhammad Fathan Marchellino - 1303194130
- Muh Awal Nur Ramadhan - 1303193108
- Muh.Dewanata.A.S - 1303194034
"""

!pip install XlsxWriter

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import xlsxwriter

hotel = pd.read_excel('masukans.xlsx')
hotel

from google.colab import drive
drive.mount('/content/drive')

def importData():
  arrData = []
  data = pd.read_excel ('/content/drive/MyDrive/masukans.xlsx')
  for i in range(len(data['ID'])):
    arrData.append([])
    arrData[i].append(data['ID'][i])
    arrData[i].append(data['Pelayanan'][i])
    arrData[i].append(data['Kamar'][i])
  return arrData

hotel.head()

ID = hotel["ID"]
Pelayanan = hotel["Pelayanan"]
Kamar = hotel["Kamar"]

#menampilkan grafik fungsi keanggotaan pelayanan
def Pelayanan():
  x1 = [0,40,50,100]
  y1 = [1,1,0,0]

  x2 = [0,40,50,70,80,100]
  y2 = [0,0,1,1,0,0]

  x3 = [0,70,80,100]
  y3 = [0,0,1,1]

  plt.plot(x1, y1,'r-', label = 'Buruk')
  plt.plot(x2, y2,'y-', label = 'Biasa')
  plt.plot(x3, y3,'b-', label = 'Bagus')

  plt.title('Pelayanan')
  plt.legend()
  plt.xticks(np.arange(min(x1), max(x1)+1, 10.0))
  plt.show()

#menampilkan grafik keanggotaan Kamar
def Kamar():
  x1 = [0, 3, 5, 10]
  y1 = [1, 1, 0, 0]

  x2 = [0, 3, 5, 7, 9, 10]
  y2 = [0, 0, 1, 1, 0, 0]

  x3 = [0, 7, 9, 10]
  y3 = [0, 0, 1, 1]

  plt.plot(x1, y1, 'r-', label = 'Kurang')
  plt.plot(x2, y2, 'y-', label = 'Sedang')
  plt.plot(x3, y3, 'b-', label = 'nyaman')

  plt.title('room rating')
  plt.legend()
  plt.xticks(np.arange(min(x1), max(x1)+1, 6.0))
  plt.show()

#menampilkan grafik nilai kelayakan

def nilaiKelayakan():
  x1 = [0,50,70,100]
  y1 = [1,1,0,0]

  x2 = [0,50,70,100]
  y2 = [0,0,1,1]

  plt.plot(x1,y1,'r-', label = 'NotRecommended')
  plt.plot(x2,y2,'g-', label = 'Recommended')

  plt.title('suggestion')
  plt.legend()
  plt.xticks(np.arange(min(x1), max(x1)+1, 10.0))
  plt.show()

Pelayanan()

#menghasilkan output nilai buruk,biasa, dan bagus berdasarkan pelayanan yang diinput
#fuzzypelayanan
def nilaiPelayanan(P):

  #buruk
  if (P <= 45):
    buruk = 1
  elif (P >= 55):
    buruk = 0
  elif (P > 45 and P < 55):
    buruk = (55-P)/(55-45)
  
  #biasa
  if (P <= 45 or P >= 85):
    biasa = 0
  elif (P >= 55 and P <= 75):
    biasa = 1
  elif (P > 45 and P < 55):
    biasa = (P-40)/(55-45)
  elif (P > 75 and P < 85):
    biasa = (85-P)/(85-75)

  #bagus
  if (P <= 75):
    bagus = 0
  elif (P >= 85):
    bagus = 1
  elif (P > 75 and P < 85):
    bagus = (P-75)/(85-75)
  return round(buruk,3),round(biasa,3),round(bagus,3)

Kamar()

#menampilkan nilai tidak nyaman, sedang, dan nyaman berdasarkan Kamar yang diinput
#fuzzyhotel
def nilaiKamar(M):

  #kurang
  if(M <= 3):
    kurang = 1
  elif(M >= 5):
    kurang = 0
  elif(M > 3 and M < 5):
    kurang = (5-M)/(5-3)
  
  #sedang
  if (M <= 3 or M >= 8 ):
    sedang = 0
  elif (M >= 5 and M <= 7 ):
    sedang = 1
  elif (M > 3 and M < 5):
    sedang = (M-3)/(4-3)
  elif (M > 7 and M < 9):
    sedang = (9-M)/(9-7)

  #nyaman
  if(M <= 7):
    nyaman = 0
  elif(M >= 9):
    nyaman = 1
  elif(M > 7 and M < 9):
    nyaman = (M-7)/(9-7)
  return round(kurang,3),round(sedang,3),round(nyaman,3)

#menghasilkan array dengan aturan yang yang telah dibuat
def rulesFuzzy(pelayanan,Kamar):
  arrRules=[
      #buruk, tidak nyaman
      ['NotRecommended', min(pelayanan[0], Kamar[0])],
      #buruk, sedang
      ['NotRecommended', min(pelayanan[0], Kamar[1])],
      #buruk, nyaman
      ['NotRecommended', min(pelayanan[0], Kamar[2])],
      #biasa, tidak nyaman
      ['NotRecommended', min(pelayanan[1], Kamar[0])],
      #biasa, sedang
      ['NotRecommended', min(pelayanan[1], Kamar[1])],
      #biasa, nyaman
      ['Recommended', min(pelayanan[1], Kamar[2])],
      #bagus, tidak nyaman
      ['NotRecommended', min(pelayanan[2], Kamar[0])],
      #bagus, sedang
      ['Recommended', min(pelayanan[2], Kamar[1])],
      #bagus, nyaman
      ['Recommended', min(pelayanan[2], Kamar[2])]]

  return arrRules

def finalResult(arrResult):
  arrTemp = []
  arr = arrfinalResult[:]
  arr = sorted(arr, key=lambda x: x[1], reverse=True)
  print()
  for i in range (10):
    arrTemp.append(arr[i][0])
  return arrTemp

#inferensi
def inference(arrRules):
  arrRecommended = []
  arrNotRecommended = []
  for x in range(len(arrRules)):
    if(arrRules[x][0] == 'Recommended'):
      arrRecommended.append(arrRules[x][1])
    elif(arrRules[x][0] == 'NotRecommended'):
      arrNotRecommended.append(arrRules[x][1])
  return max(arrRecommended),max(arrNotRecommended)

nilaiKelayakan()

#menghasilkan nilai defuzzifikasi 
#prosedur defuzzifikasi
def deFuzzy(arrInference):
  kiri = 0 
  kanan = 0
  total = 0
  mamdani = [10, 20, 30, 50, 70, 80, 90, 100]
  for i in range(len(mamdani)):
    if (mamdani[i] <= 50):
      kiri = kiri + (mamdani[i] * arrInference[0])
      total = total + arrInference[0]
    elif (mamdani[i] >= 70):
      kanan = kanan + (mamdani[i] * arrInference[0])
      total = total + arrInference[1]

  return (kanan + kiri)/total

#mainprogram

#import data dari dataset
datahotel = importData()

#menampilkan grafik
Pelayanan()
print()
Kamar()
print()
nilaiKelayakan()

#proses fuzzyfikasi untuk rating kamar dan pelayanan
arrfuzzyP = []
for i in range(len(datahotel)):
  arrfuzzyP.append(nilaiPelayanan(datahotel[i][1]))
arrfuzzyM = []
for i in range(len(datahotel)):
  arrfuzzyM.append(nilaiKamar(datahotel[i][2]))

arrfinalResult = []

#untuk mendapatkan array pada id hotelran
for i in range(len(datahotel)):
  #mendapatkan aturan untuk inferensi
  fuzzy = rulesFuzzy(arrfuzzyP[i],arrfuzzyM[i])
  #mendapatkan nilai kelayakan untuk dihitung dalam defuzzy
  infer = inference(fuzzy)
  #mendapatkan nilai defuzzy
  arrfinalResult.append([i+1,deFuzzy(infer)])

#mendapatkan 10 hotel terbaik dan menampilkannya
arrfinalResult = finalResult(arrfinalResult)
print('ID:',arrfinalResult)

#membuat file xlsx
workbook = xlsxwriter.Workbook("Luaran.xlsx")
worksheet = workbook.add_worksheet("The Data")
worksheet.write(0,0,'ID')
start = 1
for i in range(10):
  worksheet.write(start,0,arrfinalResult[i])
  start += 1

workbook.close()